#pragma once

#include "Animator.h"

Animator::Animator(Screen* screen, Animator::Animation animation_type, uint8_t number_of_repeats)
  : m_screen(screen),
  m_number_of_repeats(number_of_repeats)
{
  m_is_done = false;
  m_animation_counter = 0;
  m_frame_counter = 0;

  switch (animation_type)
  {
    case Animation::LETTERS_TEST: 
      m_animation = Animator::LETTERS_TEST_ANIMATION;
      break;
  }

  m_number_of_frames = m_animation[0];
  m_number_of_columns = m_animation[1];
  m_number_of_rows = m_animation[2];

  uint8_t number_of_columns = m_animation[1];
  m_number_of_bytes_per_row = 0;
  while (number_of_columns != 0) {
    m_number_of_bytes_per_row++;
    number_of_columns >>= 1;
  }

  m_number_of_bytes_per_row--;
  m_number_of_bytes_per_frame = m_number_of_bytes_per_row * m_number_of_rows;
}

void Animator::tick_animation()
{
  if (is_done())
    return;

  uint16_t idx = Animator::frame_data_header_length + ((uint16_t)m_frame_counter * m_number_of_bytes_per_frame);
  uint8_t bit_shift = 7;
  uint8_t value;
  int16_t x;

  for (uint8_t i = 0; i < m_number_of_rows; i++) {
    for (uint8_t j = 0; j < m_number_of_bytes_per_row; j++) {
      value = m_animation[idx];
      while (true) {
        x = (j << 3) + (7 - bit_shift);
        if (x < m_number_of_columns) {
          if (((value >> bit_shift) & 0x01) == 0x01)
            m_screen->set_value_for_pixel(x, (int16_t)i, Screen::PixelValue::CURRENT);
          else
            m_screen->unset_value_for_pixel(x, (int16_t)i, Screen::PixelValue::CURRENT);
        }

        if (bit_shift == 0)
          break;

        bit_shift--;
      }

      bit_shift = 7;
      idx++;
    }
  }

  m_frame_counter++;
  if (m_frame_counter == m_number_of_frames) {
    m_frame_counter = 0;
    m_animation_counter++;
  }

  if (m_animation_counter > m_number_of_repeats)
    m_is_done = true;
}

bool Animator::is_done() const {
  return m_is_done;
}

const uint8_t Animator::frame_data_header_length = 3;
const uint8_t Animator::LETTERS_TEST_ANIMATION[] = { 0x05, 0x1c, 0x10,
// Frame 0
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x67, 0x19, 0xcf, 0x00,
0x94, 0xa5, 0x28, 0x00,
0x94, 0xa1, 0x28, 0x00,
0xf7, 0x21, 0x2e, 0x00,
0x94, 0xa1, 0x28, 0x00,
0x94, 0xa5, 0x28, 0x00,
0x97, 0x19, 0xcf, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
// Frame 1
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x33, 0x8c, 0xe7, 0x80,
0x4a, 0x52, 0x94, 0x00,
0x4a, 0x50, 0x94, 0x00,
0x7b, 0x90, 0x97, 0x00,
0x4a, 0x50, 0x94, 0x00,
0x4a, 0x52, 0x94, 0x00,
0x4b, 0x8c, 0xe7, 0x80,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
// Frame 2
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x19, 0xc6, 0x73, 0xc0,
0x25, 0x29, 0x4a, 0x00,
0x25, 0x28, 0x4a, 0x00,
0x3d, 0xc8, 0x4b, 0x80,
0x25, 0x28, 0x4a, 0x00,
0x25, 0x29, 0x4a, 0x00,
0x25, 0xc6, 0x73, 0xc0,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
// Frame 3
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x0c, 0xe3, 0x39, 0xe0,
0x12, 0x94, 0xa5, 0x00,
0x12, 0x94, 0x25, 0x00,
0x1e, 0xe4, 0x25, 0xc0,
0x12, 0x94, 0x25, 0x00,
0x12, 0x94, 0xa5, 0x00,
0x12, 0xe3, 0x39, 0xe0,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
// Frame 4
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x06, 0x71, 0x9c, 0xf0,
0x09, 0x4a, 0x52, 0x80,
0x09, 0x4a, 0x12, 0x80,
0x0f, 0x72, 0x12, 0xe0,
0x09, 0x4a, 0x12, 0x80,
0x09, 0x4a, 0x52, 0x80,
0x09, 0x71, 0x9c, 0xf0,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00 };